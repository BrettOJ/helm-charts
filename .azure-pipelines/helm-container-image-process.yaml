trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  acrLoginServer: 'acrbojtest.azurecr.io'
  acrServiceConnection: 'konjur-azure-container-registry-connection'

stages:
  - stage: PromoteCharts
    jobs:
      - job: Promote
        steps:

          # ---------------------------------------
          # Checkout and install required tools
          # ---------------------------------------
          - checkout: self
            persistCredentials: true
            fetchDepth: 0

          - task: DockerInstaller@0
            inputs:
              dockerVersion: '28.3.0'

          - script: |
              curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
            displayName: 'Install Azure CLI'

          - script: |
              sudo wget https://get.helm.sh/helm-v3.14.4-linux-amd64.tar.gz -O helm.tar.gz
              tar -zxvf helm.tar.gz
              sudo mv linux-amd64/helm /usr/local/bin/helm
              helm version
            displayName: 'Install Helm CLI'

          - script: |
              sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
              sudo chmod +x /usr/bin/yq
              yq --version
            displayName: 'Install yq'

          # ---------------------------------------
          # Login to ACR
          # ---------------------------------------
          - task: Docker@2
            displayName: 'Login to ACR'
            inputs:
              command: login
              containerRegistry: $(acrServiceConnection)

          # ---------------------------------------
          # Detect new promotable charts
          # ---------------------------------------
          - script: |
              set -e

              echo "üîç Detecting newly added chart folders..."

              if [ -n "$SYSTEM_PULLREQUEST_TARGETBRANCH" ]; then
                git fetch origin $SYSTEM_PULLREQUEST_TARGETBRANCH
                RANGE="origin/$SYSTEM_PULLREQUEST_TARGETBRANCH...HEAD"
              else
                RANGE="$(git rev-parse HEAD^)...HEAD"
              fi

              ADDED_DIRS=$(git diff --name-status $RANGE | awk '$1 == "A" {print $2}' | awk -F/ '{print $1}' | sort -u | uniq)

              if [ -z "$ADDED_DIRS" ]; then
                echo "‚úÖ No new folders found ‚Äî nothing to do."
                exit 0
              fi

              PROMOTABLE_CHARTS=""
              for folder in $ADDED_DIRS; do
                VALUES_FILE="$folder/values.yaml"
                if [ -f "$VALUES_FILE" ]; then
                  REPO=$(yq '.image.repository' "$VALUES_FILE")
                  if [[ "$REPO" != "$(acrLoginServer)"* ]]; then
                    PROMOTABLE_CHARTS="$PROMOTABLE_CHARTS $folder"
                  else
                    echo "‚úÖ $folder already uses ACR image ‚Äî skipping"
                  fi
                fi
              done

                if [ -z "$PROMOTABLE_CHARTS" ]; then
                  echo "‚úÖ No charts require promotion."
                  touch promotable-charts.txt
                else
                  echo "$PROMOTABLE_CHARTS" | xargs -n1 > promotable-charts.txt
                fi

                echo "üìã Charts to promote:"
                cat promotable-charts.txt
             
            displayName: 'Detect Promotable Chart Folders'

          # ---------------------------------------
          # Process each chart
          # ---------------------------------------
          - script: |
              set -e
              export HELM_EXPERIMENTAL_OCI=1

              acr="$(acrLoginServer)"

              # Exit early if no charts to promote
                if [ ! -s promotable-charts.txt ]; then
                  echo "‚úÖ No charts to promote ‚Äî exiting step."
                  exit 0
                fi

              for dir in $(cat promotable-charts.txt); do
                echo "üîÑ Processing: $dir"

                CHART="$dir/Chart.yaml"
                VALUES="$dir/values.yaml"
                [ -f "$CHART" ] || { echo "‚ö†Ô∏è No Chart.yaml in $dir ‚Äî skipping"; continue; }
                [ -f "$VALUES" ] || { echo "‚ö†Ô∏è No values.yaml in $dir ‚Äî skipping"; continue; }

                NAME=$(yq '.name' "$CHART")
                VERSION=$(yq '.version' "$CHART")
                IMAGE_REPO=$(yq '.image.repository' "$VALUES")
                IMAGE_TAG=$(yq '.image.tag' "$VALUES")
                ACR_IMAGE="$acr/$(basename "$IMAGE_REPO"):$IMAGE_TAG"

                if [[ -z "$NAME" || -z "$VERSION" || -z "$IMAGE_REPO" || -z "$IMAGE_TAG" ]]; then
                  echo "‚ö†Ô∏è Missing values ‚Äî skipping $dir"
                  continue
                fi

                echo "üê≥ Pulling image: $IMAGE_REPO:$IMAGE_TAG"
                docker pull "$IMAGE_REPO:$IMAGE_TAG"

                echo "üîÅ Tagging: $ACR_IMAGE"
                docker tag "$IMAGE_REPO:$IMAGE_TAG" "$ACR_IMAGE"

                echo "üì§ Pushing to ACR..."
                docker push "$ACR_IMAGE"

                echo "üõ†Ô∏è Rewriting values.yaml to use ACR image"
                cp "$VALUES" "$VALUES.bak"
                yq -i ".image.repository = \"$acr/$(basename "$IMAGE_REPO")\"" "$VALUES"

                echo "üîç Linting chart..."
                helm lint "$dir" || {
                  echo "‚ùå Helm lint failed ‚Äî skipping $dir"
                  mv "$VALUES.bak" "$VALUES"
                  continue
                }

                echo "üì¶ Packaging chart..."
                helm package "$dir"

                echo "üì§ Pushing Helm chart to ACR"
                helm push "${NAME}-${VERSION}.tgz" "oci://$acr/helm"
                rm -f "${NAME}-${VERSION}.tgz"

                echo "üîÄ Creating Git branch for $NAME"
                BRANCH="promoted/$NAME"
                git config user.name "Azure DevOps Bot"
                git config user.email "azdo-bot@contoso.com"
                git checkout -b "$BRANCH"
                git add "$VALUES"
                git commit -m "Promote $NAME: point image to ACR"
                git push origin "$BRANCH" --force

                echo "üì¨ Creating PR if not exists..."
                az extension add --name azure-devops --only-show-errors
                export AZURE_DEVOPS_EXT_PAT="$SYSTEM_ACCESSTOKEN"
                az devops configure --defaults organization="$(System.CollectionUri)" project="$(System.TeamProject)"

                PR_EXISTS=$(az repos pr list \
                  --repository "$(Build.Repository.Name)" \
                  --source-branch "$BRANCH" \
                  --target-branch "main" \
                  --status active \
                  --query "[0].pullRequestId" \
                  --output tsv)

                if [ -z "$PR_EXISTS" ]; then
                  az repos pr create \
                    --repository "$(Build.Repository.Name)" \
                    --source-branch "$BRANCH" \
                    --target-branch "main" \
                    --title "[Promotion] $NAME chart image uses ACR" \
                    --description "Rewrites \`values.yaml\` to use \`$ACR_IMAGE\` and publishes Helm chart to ACR." \
                    --auto-complete true \
                    --squash
                else
                  echo "‚úÖ PR already exists for $BRANCH"
                fi

                echo "üßπ Restoring original values.yaml"
                mv "$VALUES.bak" "$VALUES"
              done
            displayName: 'Promote Images and Charts'
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
